// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.7.0 <0.9.0;

contract Voting {
    struct Headman {
        uint ID;
        uint votedNumber;
        string surname;
        string group;
        bool statusRegistered;
    }

    struct Student {
        uint ID;
        string surname;
        string group;
        bool statusVoted;
    }

    mapping(uint => Headman) public headmansArr;
    mapping(uint => Student) public studentsArr;

    uint public numHeadmans = 0;
    uint public numStudents = 0;

    address admin = msg.sender;

    uint public timeToVote;
    bool public votingStarted = false;

    constructor() {
        addNewStudent(0, "Ivanov", "ISiP(p) 2/3");
        addNewStudent(1, "Petrov", "ISiP(p) 2/3");
        addNewStudent(2, "Limanov", "KSK 2/27");
        addNewStudent(3, "Semenov", "KSK 2/27");

        addNewHeadman(0, "Ivanov", "ISiP(p) 2/3");
        addNewHeadman(1, "Limanov", "KSK 2/27");

        timeToVote = block.timestamp + 1 hours;
    }

    function addNewStudent(uint _ID, string memory _surname, string memory _group) public {
        require(msg.sender == admin, "You are not authorized to add new student");

        for (uint i = 0; i < numStudents; i++) {
            require(studentsArr[i].ID != _ID, "Student already exists!");
        }

        studentsArr[numStudents] = Student(_ID, _surname, _group, false);
        numStudents++;
    }

    function addNewHeadman(uint _ID, string memory _surname, string memory _group) public {
        require(msg.sender == admin, "You are not authorized to add new headman");

        for (uint i = 0; i < numHeadmans; i++) {
            require(headmansArr[i].ID != _ID, "Headman already exists!");
        }

        headmansArr[numHeadmans] = Headman(_ID, 0, _surname, _group, false);
        numHeadmans++;
    }

    function startVoting() public {
        require(msg.sender == admin, "You are not authorized to start voting");
        require(!votingStarted, "Voting has already started");
        votingStarted = true;
    }

    function vote(uint _studentID, uint _headmanID) public {
        require(votingStarted, "Voting has not started yet");
        require(block.timestamp <= timeToVote, "Voting period has ended");
        require(!studentsArr[_studentID].statusVoted, "You have already voted");
        require(keccak256(abi.encodePacked(studentsArr[_studentID].group)) == keccak256(abi.encodePacked(headmansArr[_headmanID].group)), "You are not in the same group");

        studentsArr[_studentID].statusVoted = true;
        headmansArr[_headmanID].votedNumber++;
    }

    function getVotingResult() public view returns (string memory) {
        require(votingStarted, "Voting has not started yet");
        require(block.timestamp >= timeToVote, "Voting is still ongoing");

        uint maxVotes = 0;
        uint winnerIndex;

        for (uint i = 0; i < numHeadmans; i++) {
            if (headmansArr[i].votedNumber > maxVotes) {
                maxVotes = headmansArr[i].votedNumber;
                winnerIndex = i;
            }
        }

        return string(abi.encodePacked("The winner is ", headmansArr[winnerIndex].surname, " with ", toString(headmansArr[winnerIndex].votedNumber), " votes."));
    }


}
